{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/programming/tools/git-worktree","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"git-worktree.md\"), mdx(\"h2\", null, \"References\"), mdx(\"blockquote\", null, mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By default, Git only tracks and moves that pointer along on one branch at a time. The branch you selected with Git checkout is considered your \\u201Cworking tree\\u201D.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Just like a tree in the forest, a Git worktree can have several branches at once, which is exactly what the Git worktree command allows you to do.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To keep things organized, Git worktree places each branch into a different specified folder in your file system.  To move between the multiple branches on the worktree, you simply change directory to work against the needed branch.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"img\", {\n    parentName: \"li\",\n    \"src\": \"/carlisia/f21dbb28bd8b9a2d319f0f70d1f9747e/2022-05-25-11-53-03.png\",\n    \"alt\": null\n  })))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"...you can only ever have one working tree per directory.\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git worktree list\"), \": The output details include the path of each working tree, the commit hash, and the name of the branch currently checked out in that entry.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git worktree add\"), \": \", mdx(\"div\", {\n    parentName: \"li\",\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"    - Add a new working tree to a directory that shares the same name as the branch (the most common method)\\n    - Add a new working tree to a directory with a different name as the branch\\n    - Create a new Git branch and add a new working tree to a directory that shares the same name as the branch\\n    - Create a new branch and add a new working tree to a directory with a different name as the new branch\"))), \"source: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.gitkraken.com/learn/git/git-worktree\"\n  }, \"How to Use Git Worktree | Add, List, Remove\")))), mdx(\"h2\", null, \"Questions\"), mdx(\"h2\", null, \"Notes\"), mdx(\"p\", null, \"It is 2022 and how, just HOW did I not know about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git worktrees\"), \" until recently........?????!!!!! \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog\",\n    \"title\": \"blog\"\n  }, \"[[blog]]\"), \"\"), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Use-this-git-worktree-add-example-and-never-switch-branches-again\"\n  }, \"This git worktree add example lets you never switch branches again - Coffee Talk: Java, News, Stories and Opinions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://dev.to/yankee/practical-guide-to-git-worktree-58o0\"\n  }, \"Practical Guide to Git Worktree - DEV Community\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://andrewlock.net/working-on-two-git-branches-at-once-with-git-worktree/\"\n  }, \"Working on two git branches at once with git worktree\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://levelup.gitconnected.com/git-worktrees-the-best-git-feature-youve-never-heard-of-9cd21df67baf\"\n  }, \"Git Worktrees: The Best Git Feature You\\u2019ve Never Heard Of | by James Pulec | Level Up Coding\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.syntevo.com/SmartGit/21.2/Local-Operations-on-the-Working-Tree.html\"\n  }, \"Local Operations on the Working Tree | Syntevo Documentation\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#git-worktreemd","title":"git-worktree.md","items":[{"url":"#references","title":"References"},{"url":"#questions","title":"Questions"},{"url":"#notes","title":"Notes"},{"url":"#resources","title":"Resources"}]}]},"outboundReferences":[{"contextLine":"source: [How to Use Git Worktree | Add, List, Remove](https://www.gitkraken.com/learn/git/git-worktree)","targetAnchor":null,"refWord":"How to Use Git Worktree | Add, List, Remove","label":"How to Use Git Worktree | Add, List, Remove","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"git-worktree.md\"), mdx(\"h2\", null, \"References\"), mdx(\"blockquote\", null, mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By default, Git only tracks and moves that pointer along on one branch at a time. The branch you selected with Git checkout is considered your \\u201Cworking tree\\u201D.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Just like a tree in the forest, a Git worktree can have several branches at once, which is exactly what the Git worktree command allows you to do.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To keep things organized, Git worktree places each branch into a different specified folder in your file system.  To move between the multiple branches on the worktree, you simply change directory to work against the needed branch.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"img\", {\n    parentName: \"li\",\n    \"src\": \"/carlisia/f21dbb28bd8b9a2d319f0f70d1f9747e/2022-05-25-11-53-03.png\",\n    \"alt\": null\n  })))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"...you can only ever have one working tree per directory.\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git worktree list\"), \": The output details include the path of each working tree, the commit hash, and the name of the branch currently checked out in that entry.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git worktree add\"), \": \", mdx(\"div\", {\n    parentName: \"li\",\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"    - Add a new working tree to a directory that shares the same name as the branch (the most common method)\\n    - Add a new working tree to a directory with a different name as the branch\\n    - Create a new Git branch and add a new working tree to a directory that shares the same name as the branch\\n    - Create a new branch and add a new working tree to a directory with a different name as the new branch\"))), \"source: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.gitkraken.com/learn/git/git-worktree\"\n  }, \"How to Use Git Worktree | Add, List, Remove\")))), mdx(\"h2\", null, \"Questions\"), mdx(\"h2\", null, \"Notes\"), mdx(\"p\", null, \"It is 2022 and how, just HOW did I not know about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git worktrees\"), \" until recently........?????!!!!! \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog\",\n    \"title\": \"blog\"\n  }, \"[[blog]]\"), \"\"), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Use-this-git-worktree-add-example-and-never-switch-branches-again\"\n  }, \"This git worktree add example lets you never switch branches again - Coffee Talk: Java, News, Stories and Opinions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://dev.to/yankee/practical-guide-to-git-worktree-58o0\"\n  }, \"Practical Guide to Git Worktree - DEV Community\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://andrewlock.net/working-on-two-git-branches-at-once-with-git-worktree/\"\n  }, \"Working on two git branches at once with git worktree\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://levelup.gitconnected.com/git-worktrees-the-best-git-feature-youve-never-heard-of-9cd21df67baf\"\n  }, \"Git Worktrees: The Best Git Feature You\\u2019ve Never Heard Of | by James Pulec | Level Up Coding\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.syntevo.com/SmartGit/21.2/Local-Operations-on-the-Working-Tree.html\"\n  }, \"Local Operations on the Working Tree | Syntevo Documentation\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"5eb61f60-777c-54d7-981e-39fc79669c03","fields":{"slug":"/programming/tools/git-worktree","title":"git-worktree.md"}}}}],"inboundReferences":[{"contextLine":"source: [How to Use Git Worktree | Add, List, Remove](https://www.gitkraken.com/learn/git/git-worktree)","referrer":{"parent":{"id":"5eb61f60-777c-54d7-981e-39fc79669c03","fields":{"slug":"/programming/tools/git-worktree","title":"git-worktree.md"}}}}]},"fields":{"slug":"/programming/tools/git-worktree","title":"git-worktree.md"}}},"pageContext":{"id":"5eb61f60-777c-54d7-981e-39fc79669c03","refWordMdxSlugDict":{"How to Use Git Worktree | Add, List, Remove":"programming/tools/git-worktree"},"tocTypes":["sidebar"]}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}